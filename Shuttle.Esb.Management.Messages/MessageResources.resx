<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotObtainMessageType" xml:space="preserve">
    <value>Cannot obtain message type '{0}'.</value>
    <comment>{0} = fully qualified type name</comment>
  </data>
  <data name="ConfirmMessageDeletion" xml:space="preserve">
    <value>You are about to delete the selected message(s).  Continue?</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ImageArrowBack" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\arrow_undo.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ImageMessage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\table.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TextMessages" xml:space="preserve">
    <value>Messages</value>
  </data>
  <data name="NoMessageChecked" xml:space="preserve">
    <value>A message has not been checked.</value>
  </data>
  <data name="SourceQueueUriReader" xml:space="preserve">
    <value>Could not get the IQueueReader for the queue represented by the source queue uri.</value>
  </data>
  <data name="TextReturnToSourceQueue" xml:space="preserve">
    <value>Return to source queue</value>
  </data>
  <data name="TextRefreshQueues" xml:space="preserve">
    <value>Refresh queues</value>
  </data>
  <data name="NoSerializerDefaultSerializer" xml:space="preserve">
    <value>No serializer type has been specified. The DefaultSerializer will be used.</value>
  </data>
  <data name="SerializerTypeExceptionDefaultSerializer" xml:space="preserve">
    <value>Serializer type '{0}' could not be created. The DefaultSerializer will be used.  Exception reported: {1]</value>
    <comment>{0} = serializer type, {1} = exception</comment>
  </data>
  <data name="ImageStopIgnoring" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\time_go.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TextStopIgnoring" xml:space="preserve">
    <value>Stop ignoring</value>
  </data>
  <data name="StoppedIgnoringMessage" xml:space="preserve">
    <value>Message with id '{0}' is no longer being ignored.</value>
    <comment>{0} = message id</comment>
  </data>
  <data name="CouldNotRemoveMessage" xml:space="preserve">
    <value>Could not remove message with id '{0}' from queue '{1}'.</value>
    <comment>{0} = message id, {1} = source queue uri</comment>
  </data>
  <data name="EnqueuedMessage" xml:space="preserve">
    <value>Message with id '{0}' has been enqueued on queue '{1}'.</value>
    <comment>{0} = message id, {1} = target queue uri</comment>
  </data>
  <data name="RemovedMessage" xml:space="preserve">
    <value>Acknowledged message with id '{0}' from queue '{1}'.</value>
    <comment>{0} = message id, {1} = source queue uri</comment>
  </data>
  <data name="Confirmation" xml:space="preserve">
    <value>Confirmation</value>
  </data>
  <data name="MessageCompressed" xml:space="preserve">
    <value>Cannot display message with id '{0}' since it is compressed.</value>
    <comment>{0} = message id</comment>
  </data>
  <data name="MessageEncrypted" xml:space="preserve">
    <value>Cannot display message with id '{0}' since it is encrypted.</value>
    <comment>{0} = message id</comment>
  </data>
  <data name="MessageTypeMismatch" xml:space="preserve">
    <value>The transport message assembly qualified type name '{0}' does not exactly match the type returned by the .NET runtime '{1}'.</value>
    <comment>{0} = transport message assembly qualified type name, {1} assembly qualified type name returned by .NET</comment>
  </data>
  <data name="TextReturnAllToSourceQueue" xml:space="preserve">
    <value>Return all to source queue</value>
  </data>
  <data name="TextGetMessage" xml:space="preserve">
    <value>Get message</value>
  </data>
  <data name="TextMove" xml:space="preserve">
    <value>Move</value>
  </data>
  <data name="TextMoveAll" xml:space="preserve">
    <value>Move all</value>
  </data>
  <data name="TextAcknowledge" xml:space="preserve">
    <value>Acknowledge</value>
  </data>
  <data name="ConfirmMoveAll" xml:space="preserve">
    <value>Are you sure that you would like to move all the messages from source queue '{0}' to destination queue '{1}'?</value>
    <comment>{0} = source queue uri, {1} = destination queue uri</comment>
  </data>
  <data name="MoveAllComplete" xml:space="preserve">
    <value>A total of {0} messages were moved from source queue '{1}' to destination queue '{2}'.</value>
    <comment>{0} = total messages moved, {1} = source queue uri, {2} = destination queue uri</comment>
  </data>
  <data name="ConfirmReturnAllToSourceQueue" xml:space="preserve">
    <value>Are you sure that you would like to return all the messages from source queue '{0}' to their respective recipient queue?</value>
    <comment>{0} = source queue</comment>
  </data>
  <data name="ReturnAllToSourceQueueComplete" xml:space="preserve">
    <value>A total of {0} messages were returned from source queue '{1}' to their respective recipient queue.</value>
    <comment>{0} = total messages returned</comment>
  </data>
  <data name="TextCopy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="TextCopyAll" xml:space="preserve">
    <value>Copy all</value>
  </data>
  <data name="ImageMessageCopy" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\email_add.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ImageMessageMove" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\email_go.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ConfirmCopyAll" xml:space="preserve">
    <value>Are you sure that you would like to copy all the messages from source queue '{0}' to destination queue '{1}'?</value>
    <comment>{0} = source queue uri, {1} = destination queue uri</comment>
  </data>
  <data name="CopyAllComplete" xml:space="preserve">
    <value>A total of {0} messages were copied from source queue '{1}' to destination queue '{2}'.</value>
    <comment>{0} = total messages copied, {1} = source queue uri, {2} = destination queue uri</comment>
  </data>
  <data name="TextRelease" xml:space="preserve">
    <value>Release</value>
  </data>
  <data name="ImageMessageRelease" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\arrow_redo.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>