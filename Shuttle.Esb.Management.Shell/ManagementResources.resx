<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="ImageQueues" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\database_table.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TextQueues" xml:space="preserve">
    <value>Queues</value>
  </data>
  <data name="RunningTask" xml:space="preserve">
    <value>Running task '{0}'.</value>
    <comment>{0} = task name</comment>
  </data>
  <data name="TaskCompleted" xml:space="preserve">
    <value>Task '{0}' has been completed.</value>
    <comment>{0} = task name</comment>
  </data>
  <data name="TaskQueued" xml:space="preserve">
    <value>Task '{0}' has been queued.</value>
    <comment>{0} = task name</comment>
  </data>
  <data name="NoQueueRepositoryTypeSpecified" xml:space="preserve">
    <value>No queue repository type specified.  Add an appSetting with name 'QueueRepositoryType' and specify the type name or assembly qualified name in the value.</value>
  </data>
  <data name="AttemptCreationOfQueueRepository" xml:space="preserve">
    <value>Attempting creation of queue repository from type '{0}'.</value>
    <comment>{0} = queue repository type</comment>
  </data>
  <data name="QueueRepositoryCreationSuccessful" xml:space="preserve">
    <value>Queue repository successfully created from type '{0}'.</value>
    <comment>{0} = queue repository type</comment>
  </data>
  <data name="NoQueueRepositoryAvailable" xml:space="preserve">
    <value>There is no queue repository available.  Please check the log for the reason.</value>
  </data>
  <data name="QueueRepositoryCreationException" xml:space="preserve">
    <value>Could not create queue repository from type '{0}'.  Exception reported: {1}</value>
    <comment>{0} = queue repository type, {1} = expection</comment>
  </data>
  <data name="ImageAdd" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\add.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ImageRefreshSmall" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\arrow_refresh_small.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ImageRemove" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\delete.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TextAdd" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="TextCheckAll" xml:space="preserve">
    <value>Check all</value>
  </data>
  <data name="TextInvertChecks" xml:space="preserve">
    <value>Invert checks</value>
  </data>
  <data name="TextRefresh" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="TextRemove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="Uri" xml:space="preserve">
    <value>Uri</value>
  </data>
  <data name="ValueMayNotBeEmpty" xml:space="preserve">
    <value>Value '{0}' may not be empty.</value>
    <comment>{0} = name of value that may not be empty</comment>
  </data>
  <data name="NoItemsSelected" xml:space="preserve">
    <value>No '{0}' selected.</value>
    <comment>{0} = name of the item</comment>
  </data>
  <data name="ConfirmRemoval" xml:space="preserve">
    <value>You are about to remove the selected '{0}'.  Continue?</value>
    <comment>{0} = name of the selected item(s)</comment>
  </data>
  <data name="Confirmation" xml:space="preserve">
    <value>Confirmation</value>
  </data>
  <data name="ImageDataStores" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\database.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TextDataStores" xml:space="preserve">
    <value>Data stores</value>
  </data>
  <data name="ViewUserControlNull" xml:space="preserve">
    <value>Type '{0}' does not return a valid UserControl instance.  ViewUserControl is 'null'.</value>
    <comment>{0} = full type name</comment>
  </data>
  <data name="DataStoreRepositoryCreationException" xml:space="preserve">
    <value>Could not create datastore repository from type '{0}'.  Exception reported: {1}</value>
    <comment>{0} = data store repository type, {1} = expection</comment>
  </data>
  <data name="DataStoreRepositoryCreationSuccessful" xml:space="preserve">
    <value>Data store repository successfully created from type '{0}'.</value>
    <comment>{0} = data store repository type</comment>
  </data>
  <data name="NoDataStoreRepositoryAvailable" xml:space="preserve">
    <value>There is no data store repository available.  Please check the log for the reason.</value>
  </data>
  <data name="NoDataStoreRepositoryTypeSpecified" xml:space="preserve">
    <value>No data store repository type specified.  Add an appSetting with name 'DataStoreRepositoryType' and specify the type name or assembly qualified name in the value.</value>
  </data>
  <data name="AttemptCreationOfDataStoreRepository" xml:space="preserve">
    <value>Attempting creation of data store repository from type '{0}'.</value>
    <comment>{0} = data store repository type</comment>
  </data>
  <data name="ImageSave" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\bullet_disk.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TextSave" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="ConnectionString" xml:space="preserve">
    <value>Connection string</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ProviderName" xml:space="preserve">
    <value>Provider name</value>
  </data>
  <data name="FormatDateTime" xml:space="preserve">
    <value>dd MMM yyyy HH:mm:ss</value>
  </data>
  <data name="DataStoreRepositoryRequired" xml:space="preserve">
    <value>A data store repository is required for component '{0}' to function.  Once you have create a data store restart the application to load the component.</value>
    <comment>{0} = component name</comment>
  </data>
  <data name="ManagementModuleInitializerHasNoDefaultConstructor" xml:space="preserve">
    <value>Type '{0}' implementing IManagementModuleInitializer has no default constructor.  It cannot be instantiated.</value>
    <comment>{0} = full type name</comment>
  </data>
  <data name="DataStoreRepositoryTypeNotFound" xml:space="preserve">
    <value>Could not find DataStoreRepositoryType '{0}' as specified in the application configuration.</value>
    <comment>{0} = the specified data store repository type</comment>
  </data>
  <data name="QueueRepositoryTypeNotFound" xml:space="preserve">
    <value>Could not find QueueRepositoryType '{0}' as specified in the application configuration.</value>
    <comment>{0} = the specified queue repository type</comment>
  </data>
  <data name="NoDataStoreSelected" xml:space="preserve">
    <value>No data store has been selected.</value>
  </data>
  <data name="InboxWorkQueueUri" xml:space="preserve">
    <value>Inbox work queue uri</value>
  </data>
  <data name="ImageDriveMagnify" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\drive_magnify.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TextRefreshDataStores" xml:space="preserve">
    <value>Refresh data stores</value>
  </data>
  <data name="ImageFilter" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\application_form_magnify.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ImageCheck" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\tick.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>